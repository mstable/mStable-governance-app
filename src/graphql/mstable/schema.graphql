schema {
  query: Query
  subscription: Subscription
}
type Query {
  userLockup(
    id: ID!
    """
    The block at which the query should be executed. Can either be an `{ number:
    Int }` containing the block number or a `{ hash: Bytes }` value containing a
    block hash. Defaults to the latest block when omitted.
    """
    block: Block_height
  ): UserLockup
  userLockups(
    skip: Int = 0
    first: Int = 100
    orderBy: UserLockup_orderBy
    orderDirection: OrderDirection
    where: UserLockup_filter
    """
    The block at which the query should be executed. Can either be an `{ number:
    Int }` containing the block number or a `{ hash: Bytes }` value containing a
    block hash. Defaults to the latest block when omitted.
    """
    block: Block_height
  ): [UserLockup!]!
  token(
    id: ID!
    """
    The block at which the query should be executed. Can either be an `{ number:
    Int }` containing the block number or a `{ hash: Bytes }` value containing a
    block hash. Defaults to the latest block when omitted.
    """
    block: Block_height
  ): Token
  tokens(
    skip: Int = 0
    first: Int = 100
    orderBy: Token_orderBy
    orderDirection: OrderDirection
    where: Token_filter
    """
    The block at which the query should be executed. Can either be an `{ number:
    Int }` containing the block number or a `{ hash: Bytes }` value containing a
    block hash. Defaults to the latest block when omitted.
    """
    block: Block_height
  ): [Token!]!
  incentivisedVotingLockup(
    id: ID!
    """
    The block at which the query should be executed. Can either be an `{ number:
    Int }` containing the block number or a `{ hash: Bytes }` value containing a
    block hash. Defaults to the latest block when omitted.
    """
    block: Block_height
  ): IncentivisedVotingLockup
  incentivisedVotingLockups(
    skip: Int = 0
    first: Int = 100
    orderBy: IncentivisedVotingLockup_orderBy
    orderDirection: OrderDirection
    where: IncentivisedVotingLockup_filter
    """
    The block at which the query should be executed. Can either be an `{ number:
    Int }` containing the block number or a `{ hash: Bytes }` value containing a
    block hash. Defaults to the latest block when omitted.
    """
    block: Block_height
  ): [IncentivisedVotingLockup!]!
  rewardsDistributor(
    id: ID!
    """
    The block at which the query should be executed. Can either be an `{ number:
    Int }` containing the block number or a `{ hash: Bytes }` value containing a
    block hash. Defaults to the latest block when omitted.
    """
    block: Block_height
  ): RewardsDistributor
  rewardsDistributors(
    skip: Int = 0
    first: Int = 100
    orderBy: RewardsDistributor_orderBy
    orderDirection: OrderDirection
    where: RewardsDistributor_filter
    """
    The block at which the query should be executed. Can either be an `{ number:
    Int }` containing the block number or a `{ hash: Bytes }` value containing a
    block hash. Defaults to the latest block when omitted.
    """
    block: Block_height
  ): [RewardsDistributor!]!
  stakingReward(
    id: ID!
    """
    The block at which the query should be executed. Can either be an `{ number:
    Int }` containing the block number or a `{ hash: Bytes }` value containing a
    block hash. Defaults to the latest block when omitted.
    """
    block: Block_height
  ): StakingReward
  stakingRewards(
    skip: Int = 0
    first: Int = 100
    orderBy: StakingReward_orderBy
    orderDirection: OrderDirection
    where: StakingReward_filter
    """
    The block at which the query should be executed. Can either be an `{ number:
    Int }` containing the block number or a `{ hash: Bytes }` value containing a
    block hash. Defaults to the latest block when omitted.
    """
    block: Block_height
  ): [StakingReward!]!
  stakingBalance(
    id: ID!
    """
    The block at which the query should be executed. Can either be an `{ number:
    Int }` containing the block number or a `{ hash: Bytes }` value containing a
    block hash. Defaults to the latest block when omitted.
    """
    block: Block_height
  ): StakingBalance
  stakingBalances(
    skip: Int = 0
    first: Int = 100
    orderBy: StakingBalance_orderBy
    orderDirection: OrderDirection
    where: StakingBalance_filter
    """
    The block at which the query should be executed. Can either be an `{ number:
    Int }` containing the block number or a `{ hash: Bytes }` value containing a
    block hash. Defaults to the latest block when omitted.
    """
    block: Block_height
  ): [StakingBalance!]!
  withdrawTransaction(
    id: ID!
    """
    The block at which the query should be executed. Can either be an `{ number:
    Int }` containing the block number or a `{ hash: Bytes }` value containing a
    block hash. Defaults to the latest block when omitted.
    """
    block: Block_height
  ): WithdrawTransaction
  withdrawTransactions(
    skip: Int = 0
    first: Int = 100
    orderBy: WithdrawTransaction_orderBy
    orderDirection: OrderDirection
    where: WithdrawTransaction_filter
    """
    The block at which the query should be executed. Can either be an `{ number:
    Int }` containing the block number or a `{ hash: Bytes }` value containing a
    block hash. Defaults to the latest block when omitted.
    """
    block: Block_height
  ): [WithdrawTransaction!]!
  ejectTransaction(
    id: ID!
    """
    The block at which the query should be executed. Can either be an `{ number:
    Int }` containing the block number or a `{ hash: Bytes }` value containing a
    block hash. Defaults to the latest block when omitted.
    """
    block: Block_height
  ): EjectTransaction
  ejectTransactions(
    skip: Int = 0
    first: Int = 100
    orderBy: EjectTransaction_orderBy
    orderDirection: OrderDirection
    where: EjectTransaction_filter
    """
    The block at which the query should be executed. Can either be an `{ number:
    Int }` containing the block number or a `{ hash: Bytes }` value containing a
    block hash. Defaults to the latest block when omitted.
    """
    block: Block_height
  ): [EjectTransaction!]!
  claimTransaction(
    id: ID!
    """
    The block at which the query should be executed. Can either be an `{ number:
    Int }` containing the block number or a `{ hash: Bytes }` value containing a
    block hash. Defaults to the latest block when omitted.
    """
    block: Block_height
  ): ClaimTransaction
  claimTransactions(
    skip: Int = 0
    first: Int = 100
    orderBy: ClaimTransaction_orderBy
    orderDirection: OrderDirection
    where: ClaimTransaction_filter
    """
    The block at which the query should be executed. Can either be an `{ number:
    Int }` containing the block number or a `{ hash: Bytes }` value containing a
    block hash. Defaults to the latest block when omitted.
    """
    block: Block_height
  ): [ClaimTransaction!]!
  createLockTransaction(
    id: ID!
    """
    The block at which the query should be executed. Can either be an `{ number:
    Int }` containing the block number or a `{ hash: Bytes }` value containing a
    block hash. Defaults to the latest block when omitted.
    """
    block: Block_height
  ): CreateLockTransaction
  createLockTransactions(
    skip: Int = 0
    first: Int = 100
    orderBy: CreateLockTransaction_orderBy
    orderDirection: OrderDirection
    where: CreateLockTransaction_filter
    """
    The block at which the query should be executed. Can either be an `{ number:
    Int }` containing the block number or a `{ hash: Bytes }` value containing a
    block hash. Defaults to the latest block when omitted.
    """
    block: Block_height
  ): [CreateLockTransaction!]!
  increaseLockAmountTransaction(
    id: ID!
    """
    The block at which the query should be executed. Can either be an `{ number:
    Int }` containing the block number or a `{ hash: Bytes }` value containing a
    block hash. Defaults to the latest block when omitted.
    """
    block: Block_height
  ): IncreaseLockAmountTransaction
  increaseLockAmountTransactions(
    skip: Int = 0
    first: Int = 100
    orderBy: IncreaseLockAmountTransaction_orderBy
    orderDirection: OrderDirection
    where: IncreaseLockAmountTransaction_filter
    """
    The block at which the query should be executed. Can either be an `{ number:
    Int }` containing the block number or a `{ hash: Bytes }` value containing a
    block hash. Defaults to the latest block when omitted.
    """
    block: Block_height
  ): [IncreaseLockAmountTransaction!]!
  increaseLockTimeTransaction(
    id: ID!
    """
    The block at which the query should be executed. Can either be an `{ number:
    Int }` containing the block number or a `{ hash: Bytes }` value containing a
    block hash. Defaults to the latest block when omitted.
    """
    block: Block_height
  ): IncreaseLockTimeTransaction
  increaseLockTimeTransactions(
    skip: Int = 0
    first: Int = 100
    orderBy: IncreaseLockTimeTransaction_orderBy
    orderDirection: OrderDirection
    where: IncreaseLockTimeTransaction_filter
    """
    The block at which the query should be executed. Can either be an `{ number:
    Int }` containing the block number or a `{ hash: Bytes }` value containing a
    block hash. Defaults to the latest block when omitted.
    """
    block: Block_height
  ): [IncreaseLockTimeTransaction!]!
  transaction(
    id: ID!
    """
    The block at which the query should be executed. Can either be an `{ number:
    Int }` containing the block number or a `{ hash: Bytes }` value containing a
    block hash. Defaults to the latest block when omitted.
    """
    block: Block_height
  ): Transaction
  transactions(
    skip: Int = 0
    first: Int = 100
    orderBy: Transaction_orderBy
    orderDirection: OrderDirection
    where: Transaction_filter
    """
    The block at which the query should be executed. Can either be an `{ number:
    Int }` containing the block number or a `{ hash: Bytes }` value containing a
    block hash. Defaults to the latest block when omitted.
    """
    block: Block_height
  ): [Transaction!]!
}
input Block_height {
  hash: Bytes
  number: Int
}
scalar Bytes
type UserLockup {
  id: ID!
  account: Bytes!
  incentivisedVotingLockup: IncentivisedVotingLockup!
  value: BigInt!
  lockTime: BigInt!
  ts: BigInt!
  slope: BigInt!
  bias: BigInt!
  ejected: Boolean!
}
type IncentivisedVotingLockup {
  id: ID!
  userLockups(skip: Int = 0, first: Int = 100, orderBy: UserLockup_orderBy, orderDirection: OrderDirection, where: UserLockup_filter): [UserLockup!]!
  stakingRewards(skip: Int = 0, first: Int = 100, orderBy: StakingReward_orderBy, orderDirection: OrderDirection, where: StakingReward_filter): [StakingReward!]!
  stakingBalances(skip: Int = 0, first: Int = 100, orderBy: StakingBalance_orderBy, orderDirection: OrderDirection, where: StakingBalance_filter): [StakingBalance!]!
  votingToken: Token!
  end: BigInt!
  periodFinish: Int!
  lastUpdateTime: Int!
  stakingToken: Token!
  rewardPerTokenStored: BigInt!
  duration: BigInt!
  rewardRate: BigInt!
  rewardsToken: Token!
  rewardsDistributor: RewardsDistributor!
  globalEpoch: BigInt!
  expired: Boolean!
  maxTime: BigInt!
  totalStaticWeight: BigInt!
  totalStakingRewards: BigInt!
  totalValue: BigInt!
}
enum UserLockup_orderBy {
  id
  account
  incentivisedVotingLockup
  value
  lockTime
  ts
  slope
  bias
  ejected
}
enum OrderDirection {
  asc
  desc
}
input UserLockup_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  account: Bytes
  account_not: Bytes
  account_in: [Bytes!]
  account_not_in: [Bytes!]
  account_contains: Bytes
  account_not_contains: Bytes
  incentivisedVotingLockup: String
  incentivisedVotingLockup_not: String
  incentivisedVotingLockup_gt: String
  incentivisedVotingLockup_lt: String
  incentivisedVotingLockup_gte: String
  incentivisedVotingLockup_lte: String
  incentivisedVotingLockup_in: [String!]
  incentivisedVotingLockup_not_in: [String!]
  incentivisedVotingLockup_contains: String
  incentivisedVotingLockup_not_contains: String
  incentivisedVotingLockup_starts_with: String
  incentivisedVotingLockup_not_starts_with: String
  incentivisedVotingLockup_ends_with: String
  incentivisedVotingLockup_not_ends_with: String
  value: BigInt
  value_not: BigInt
  value_gt: BigInt
  value_lt: BigInt
  value_gte: BigInt
  value_lte: BigInt
  value_in: [BigInt!]
  value_not_in: [BigInt!]
  lockTime: BigInt
  lockTime_not: BigInt
  lockTime_gt: BigInt
  lockTime_lt: BigInt
  lockTime_gte: BigInt
  lockTime_lte: BigInt
  lockTime_in: [BigInt!]
  lockTime_not_in: [BigInt!]
  ts: BigInt
  ts_not: BigInt
  ts_gt: BigInt
  ts_lt: BigInt
  ts_gte: BigInt
  ts_lte: BigInt
  ts_in: [BigInt!]
  ts_not_in: [BigInt!]
  slope: BigInt
  slope_not: BigInt
  slope_gt: BigInt
  slope_lt: BigInt
  slope_gte: BigInt
  slope_lte: BigInt
  slope_in: [BigInt!]
  slope_not_in: [BigInt!]
  bias: BigInt
  bias_not: BigInt
  bias_gt: BigInt
  bias_lt: BigInt
  bias_gte: BigInt
  bias_lte: BigInt
  bias_in: [BigInt!]
  bias_not_in: [BigInt!]
  ejected: Boolean
  ejected_not: Boolean
  ejected_in: [Boolean!]
  ejected_not_in: [Boolean!]
}
scalar BigInt
enum StakingReward_orderBy {
  id
  amount
  rewardsPaid
  amountPerTokenPaid
  account
  incentivisedVotingLockup
}
input StakingReward_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  amount: BigInt
  amount_not: BigInt
  amount_gt: BigInt
  amount_lt: BigInt
  amount_gte: BigInt
  amount_lte: BigInt
  amount_in: [BigInt!]
  amount_not_in: [BigInt!]
  rewardsPaid: BigInt
  rewardsPaid_not: BigInt
  rewardsPaid_gt: BigInt
  rewardsPaid_lt: BigInt
  rewardsPaid_gte: BigInt
  rewardsPaid_lte: BigInt
  rewardsPaid_in: [BigInt!]
  rewardsPaid_not_in: [BigInt!]
  amountPerTokenPaid: BigInt
  amountPerTokenPaid_not: BigInt
  amountPerTokenPaid_gt: BigInt
  amountPerTokenPaid_lt: BigInt
  amountPerTokenPaid_gte: BigInt
  amountPerTokenPaid_lte: BigInt
  amountPerTokenPaid_in: [BigInt!]
  amountPerTokenPaid_not_in: [BigInt!]
  account: Bytes
  account_not: Bytes
  account_in: [Bytes!]
  account_not_in: [Bytes!]
  account_contains: Bytes
  account_not_contains: Bytes
  incentivisedVotingLockup: String
  incentivisedVotingLockup_not: String
  incentivisedVotingLockup_gt: String
  incentivisedVotingLockup_lt: String
  incentivisedVotingLockup_gte: String
  incentivisedVotingLockup_lte: String
  incentivisedVotingLockup_in: [String!]
  incentivisedVotingLockup_not_in: [String!]
  incentivisedVotingLockup_contains: String
  incentivisedVotingLockup_not_contains: String
  incentivisedVotingLockup_starts_with: String
  incentivisedVotingLockup_not_starts_with: String
  incentivisedVotingLockup_ends_with: String
  incentivisedVotingLockup_not_ends_with: String
}
type StakingReward {
  id: ID!
  amount: BigInt!
  rewardsPaid: BigInt!
  amountPerTokenPaid: BigInt!
  account: Bytes!
  incentivisedVotingLockup: IncentivisedVotingLockup!
}
enum StakingBalance_orderBy {
  id
  account
  incentivisedVotingLockup
  amount
}
input StakingBalance_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  account: Bytes
  account_not: Bytes
  account_in: [Bytes!]
  account_not_in: [Bytes!]
  account_contains: Bytes
  account_not_contains: Bytes
  incentivisedVotingLockup: String
  incentivisedVotingLockup_not: String
  incentivisedVotingLockup_gt: String
  incentivisedVotingLockup_lt: String
  incentivisedVotingLockup_gte: String
  incentivisedVotingLockup_lte: String
  incentivisedVotingLockup_in: [String!]
  incentivisedVotingLockup_not_in: [String!]
  incentivisedVotingLockup_contains: String
  incentivisedVotingLockup_not_contains: String
  incentivisedVotingLockup_starts_with: String
  incentivisedVotingLockup_not_starts_with: String
  incentivisedVotingLockup_ends_with: String
  incentivisedVotingLockup_not_ends_with: String
  amount: BigInt
  amount_not: BigInt
  amount_gt: BigInt
  amount_lt: BigInt
  amount_gte: BigInt
  amount_lte: BigInt
  amount_in: [BigInt!]
  amount_not_in: [BigInt!]
}
type StakingBalance {
  id: ID!
  account: Bytes!
  incentivisedVotingLockup: IncentivisedVotingLockup!
  amount: BigInt!
}
type Token {
  id: ID!
  address: Bytes!
  decimals: Int!
  name: String!
  symbol: String!
  totalSupply: BigInt!
}
type RewardsDistributor {
  id: ID!
  fundManagers: [Bytes!]!
}
enum Token_orderBy {
  id
  address
  decimals
  name
  symbol
  totalSupply
}
input Token_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  address: Bytes
  address_not: Bytes
  address_in: [Bytes!]
  address_not_in: [Bytes!]
  address_contains: Bytes
  address_not_contains: Bytes
  decimals: Int
  decimals_not: Int
  decimals_gt: Int
  decimals_lt: Int
  decimals_gte: Int
  decimals_lte: Int
  decimals_in: [Int!]
  decimals_not_in: [Int!]
  name: String
  name_not: String
  name_gt: String
  name_lt: String
  name_gte: String
  name_lte: String
  name_in: [String!]
  name_not_in: [String!]
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  symbol: String
  symbol_not: String
  symbol_gt: String
  symbol_lt: String
  symbol_gte: String
  symbol_lte: String
  symbol_in: [String!]
  symbol_not_in: [String!]
  symbol_contains: String
  symbol_not_contains: String
  symbol_starts_with: String
  symbol_not_starts_with: String
  symbol_ends_with: String
  symbol_not_ends_with: String
  totalSupply: BigInt
  totalSupply_not: BigInt
  totalSupply_gt: BigInt
  totalSupply_lt: BigInt
  totalSupply_gte: BigInt
  totalSupply_lte: BigInt
  totalSupply_in: [BigInt!]
  totalSupply_not_in: [BigInt!]
}
enum IncentivisedVotingLockup_orderBy {
  id
  userLockups
  stakingRewards
  stakingBalances
  votingToken
  end
  periodFinish
  lastUpdateTime
  stakingToken
  rewardPerTokenStored
  duration
  rewardRate
  rewardsToken
  rewardsDistributor
  globalEpoch
  expired
  maxTime
  totalStaticWeight
  totalStakingRewards
  totalValue
}
input IncentivisedVotingLockup_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  votingToken: String
  votingToken_not: String
  votingToken_gt: String
  votingToken_lt: String
  votingToken_gte: String
  votingToken_lte: String
  votingToken_in: [String!]
  votingToken_not_in: [String!]
  votingToken_contains: String
  votingToken_not_contains: String
  votingToken_starts_with: String
  votingToken_not_starts_with: String
  votingToken_ends_with: String
  votingToken_not_ends_with: String
  end: BigInt
  end_not: BigInt
  end_gt: BigInt
  end_lt: BigInt
  end_gte: BigInt
  end_lte: BigInt
  end_in: [BigInt!]
  end_not_in: [BigInt!]
  periodFinish: Int
  periodFinish_not: Int
  periodFinish_gt: Int
  periodFinish_lt: Int
  periodFinish_gte: Int
  periodFinish_lte: Int
  periodFinish_in: [Int!]
  periodFinish_not_in: [Int!]
  lastUpdateTime: Int
  lastUpdateTime_not: Int
  lastUpdateTime_gt: Int
  lastUpdateTime_lt: Int
  lastUpdateTime_gte: Int
  lastUpdateTime_lte: Int
  lastUpdateTime_in: [Int!]
  lastUpdateTime_not_in: [Int!]
  stakingToken: String
  stakingToken_not: String
  stakingToken_gt: String
  stakingToken_lt: String
  stakingToken_gte: String
  stakingToken_lte: String
  stakingToken_in: [String!]
  stakingToken_not_in: [String!]
  stakingToken_contains: String
  stakingToken_not_contains: String
  stakingToken_starts_with: String
  stakingToken_not_starts_with: String
  stakingToken_ends_with: String
  stakingToken_not_ends_with: String
  rewardPerTokenStored: BigInt
  rewardPerTokenStored_not: BigInt
  rewardPerTokenStored_gt: BigInt
  rewardPerTokenStored_lt: BigInt
  rewardPerTokenStored_gte: BigInt
  rewardPerTokenStored_lte: BigInt
  rewardPerTokenStored_in: [BigInt!]
  rewardPerTokenStored_not_in: [BigInt!]
  duration: BigInt
  duration_not: BigInt
  duration_gt: BigInt
  duration_lt: BigInt
  duration_gte: BigInt
  duration_lte: BigInt
  duration_in: [BigInt!]
  duration_not_in: [BigInt!]
  rewardRate: BigInt
  rewardRate_not: BigInt
  rewardRate_gt: BigInt
  rewardRate_lt: BigInt
  rewardRate_gte: BigInt
  rewardRate_lte: BigInt
  rewardRate_in: [BigInt!]
  rewardRate_not_in: [BigInt!]
  rewardsToken: String
  rewardsToken_not: String
  rewardsToken_gt: String
  rewardsToken_lt: String
  rewardsToken_gte: String
  rewardsToken_lte: String
  rewardsToken_in: [String!]
  rewardsToken_not_in: [String!]
  rewardsToken_contains: String
  rewardsToken_not_contains: String
  rewardsToken_starts_with: String
  rewardsToken_not_starts_with: String
  rewardsToken_ends_with: String
  rewardsToken_not_ends_with: String
  rewardsDistributor: String
  rewardsDistributor_not: String
  rewardsDistributor_gt: String
  rewardsDistributor_lt: String
  rewardsDistributor_gte: String
  rewardsDistributor_lte: String
  rewardsDistributor_in: [String!]
  rewardsDistributor_not_in: [String!]
  rewardsDistributor_contains: String
  rewardsDistributor_not_contains: String
  rewardsDistributor_starts_with: String
  rewardsDistributor_not_starts_with: String
  rewardsDistributor_ends_with: String
  rewardsDistributor_not_ends_with: String
  globalEpoch: BigInt
  globalEpoch_not: BigInt
  globalEpoch_gt: BigInt
  globalEpoch_lt: BigInt
  globalEpoch_gte: BigInt
  globalEpoch_lte: BigInt
  globalEpoch_in: [BigInt!]
  globalEpoch_not_in: [BigInt!]
  expired: Boolean
  expired_not: Boolean
  expired_in: [Boolean!]
  expired_not_in: [Boolean!]
  maxTime: BigInt
  maxTime_not: BigInt
  maxTime_gt: BigInt
  maxTime_lt: BigInt
  maxTime_gte: BigInt
  maxTime_lte: BigInt
  maxTime_in: [BigInt!]
  maxTime_not_in: [BigInt!]
  totalStaticWeight: BigInt
  totalStaticWeight_not: BigInt
  totalStaticWeight_gt: BigInt
  totalStaticWeight_lt: BigInt
  totalStaticWeight_gte: BigInt
  totalStaticWeight_lte: BigInt
  totalStaticWeight_in: [BigInt!]
  totalStaticWeight_not_in: [BigInt!]
  totalStakingRewards: BigInt
  totalStakingRewards_not: BigInt
  totalStakingRewards_gt: BigInt
  totalStakingRewards_lt: BigInt
  totalStakingRewards_gte: BigInt
  totalStakingRewards_lte: BigInt
  totalStakingRewards_in: [BigInt!]
  totalStakingRewards_not_in: [BigInt!]
  totalValue: BigInt
  totalValue_not: BigInt
  totalValue_gt: BigInt
  totalValue_lt: BigInt
  totalValue_gte: BigInt
  totalValue_lte: BigInt
  totalValue_in: [BigInt!]
  totalValue_not_in: [BigInt!]
}
enum RewardsDistributor_orderBy {
  id
  fundManagers
}
input RewardsDistributor_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  fundManagers: [Bytes!]
  fundManagers_not: [Bytes!]
  fundManagers_contains: [Bytes!]
  fundManagers_not_contains: [Bytes!]
}
type WithdrawTransaction implements Transaction {
  id: ID!
  block: Int!
  hash: Bytes!
  provider: Bytes!
  sender: Bytes!
  timestamp: BigInt!
  type: TransactionType!
  value: BigInt!
}
interface Transaction {
  id: ID!
  block: Int!
  hash: Bytes!
  sender: Bytes!
  timestamp: BigInt!
  type: TransactionType!
}
enum TransactionType {
  CREATE_LOCK
  INCREASE_LOCK_TIME
  INCREASE_LOCK_AMOUNT
  WITHDRAW
  EJECT
  CLAIM
}
enum WithdrawTransaction_orderBy {
  id
  block
  hash
  provider
  sender
  timestamp
  type
  value
}
input WithdrawTransaction_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  block: Int
  block_not: Int
  block_gt: Int
  block_lt: Int
  block_gte: Int
  block_lte: Int
  block_in: [Int!]
  block_not_in: [Int!]
  hash: Bytes
  hash_not: Bytes
  hash_in: [Bytes!]
  hash_not_in: [Bytes!]
  hash_contains: Bytes
  hash_not_contains: Bytes
  provider: Bytes
  provider_not: Bytes
  provider_in: [Bytes!]
  provider_not_in: [Bytes!]
  provider_contains: Bytes
  provider_not_contains: Bytes
  sender: Bytes
  sender_not: Bytes
  sender_in: [Bytes!]
  sender_not_in: [Bytes!]
  sender_contains: Bytes
  sender_not_contains: Bytes
  timestamp: BigInt
  timestamp_not: BigInt
  timestamp_gt: BigInt
  timestamp_lt: BigInt
  timestamp_gte: BigInt
  timestamp_lte: BigInt
  timestamp_in: [BigInt!]
  timestamp_not_in: [BigInt!]
  type: TransactionType
  type_not: TransactionType
  value: BigInt
  value_not: BigInt
  value_gt: BigInt
  value_lt: BigInt
  value_gte: BigInt
  value_lte: BigInt
  value_in: [BigInt!]
  value_not_in: [BigInt!]
}
type EjectTransaction implements Transaction {
  id: ID!
  block: Int!
  ejected: Bytes!
  ejector: Bytes!
  hash: Bytes!
  sender: Bytes!
  timestamp: BigInt!
  type: TransactionType!
}
enum EjectTransaction_orderBy {
  id
  block
  ejected
  ejector
  hash
  sender
  timestamp
  type
}
input EjectTransaction_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  block: Int
  block_not: Int
  block_gt: Int
  block_lt: Int
  block_gte: Int
  block_lte: Int
  block_in: [Int!]
  block_not_in: [Int!]
  ejected: Bytes
  ejected_not: Bytes
  ejected_in: [Bytes!]
  ejected_not_in: [Bytes!]
  ejected_contains: Bytes
  ejected_not_contains: Bytes
  ejector: Bytes
  ejector_not: Bytes
  ejector_in: [Bytes!]
  ejector_not_in: [Bytes!]
  ejector_contains: Bytes
  ejector_not_contains: Bytes
  hash: Bytes
  hash_not: Bytes
  hash_in: [Bytes!]
  hash_not_in: [Bytes!]
  hash_contains: Bytes
  hash_not_contains: Bytes
  sender: Bytes
  sender_not: Bytes
  sender_in: [Bytes!]
  sender_not_in: [Bytes!]
  sender_contains: Bytes
  sender_not_contains: Bytes
  timestamp: BigInt
  timestamp_not: BigInt
  timestamp_gt: BigInt
  timestamp_lt: BigInt
  timestamp_gte: BigInt
  timestamp_lte: BigInt
  timestamp_in: [BigInt!]
  timestamp_not_in: [BigInt!]
  type: TransactionType
  type_not: TransactionType
}
type ClaimTransaction implements Transaction {
  id: ID!
  block: Int!
  hash: Bytes!
  reward: BigInt!
  sender: Bytes!
  timestamp: BigInt!
  type: TransactionType!
  user: Bytes!
}
enum ClaimTransaction_orderBy {
  id
  block
  hash
  reward
  sender
  timestamp
  type
  user
}
input ClaimTransaction_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  block: Int
  block_not: Int
  block_gt: Int
  block_lt: Int
  block_gte: Int
  block_lte: Int
  block_in: [Int!]
  block_not_in: [Int!]
  hash: Bytes
  hash_not: Bytes
  hash_in: [Bytes!]
  hash_not_in: [Bytes!]
  hash_contains: Bytes
  hash_not_contains: Bytes
  reward: BigInt
  reward_not: BigInt
  reward_gt: BigInt
  reward_lt: BigInt
  reward_gte: BigInt
  reward_lte: BigInt
  reward_in: [BigInt!]
  reward_not_in: [BigInt!]
  sender: Bytes
  sender_not: Bytes
  sender_in: [Bytes!]
  sender_not_in: [Bytes!]
  sender_contains: Bytes
  sender_not_contains: Bytes
  timestamp: BigInt
  timestamp_not: BigInt
  timestamp_gt: BigInt
  timestamp_lt: BigInt
  timestamp_gte: BigInt
  timestamp_lte: BigInt
  timestamp_in: [BigInt!]
  timestamp_not_in: [BigInt!]
  type: TransactionType
  type_not: TransactionType
  user: Bytes
  user_not: Bytes
  user_in: [Bytes!]
  user_not_in: [Bytes!]
  user_contains: Bytes
  user_not_contains: Bytes
}
type CreateLockTransaction implements Transaction {
  id: ID!
  block: Int!
  hash: Bytes!
  lockTime: BigInt!
  provider: Bytes!
  sender: Bytes!
  timestamp: BigInt!
  type: TransactionType!
  value: BigInt!
}
enum CreateLockTransaction_orderBy {
  id
  block
  hash
  lockTime
  provider
  sender
  timestamp
  type
  value
}
input CreateLockTransaction_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  block: Int
  block_not: Int
  block_gt: Int
  block_lt: Int
  block_gte: Int
  block_lte: Int
  block_in: [Int!]
  block_not_in: [Int!]
  hash: Bytes
  hash_not: Bytes
  hash_in: [Bytes!]
  hash_not_in: [Bytes!]
  hash_contains: Bytes
  hash_not_contains: Bytes
  lockTime: BigInt
  lockTime_not: BigInt
  lockTime_gt: BigInt
  lockTime_lt: BigInt
  lockTime_gte: BigInt
  lockTime_lte: BigInt
  lockTime_in: [BigInt!]
  lockTime_not_in: [BigInt!]
  provider: Bytes
  provider_not: Bytes
  provider_in: [Bytes!]
  provider_not_in: [Bytes!]
  provider_contains: Bytes
  provider_not_contains: Bytes
  sender: Bytes
  sender_not: Bytes
  sender_in: [Bytes!]
  sender_not_in: [Bytes!]
  sender_contains: Bytes
  sender_not_contains: Bytes
  timestamp: BigInt
  timestamp_not: BigInt
  timestamp_gt: BigInt
  timestamp_lt: BigInt
  timestamp_gte: BigInt
  timestamp_lte: BigInt
  timestamp_in: [BigInt!]
  timestamp_not_in: [BigInt!]
  type: TransactionType
  type_not: TransactionType
  value: BigInt
  value_not: BigInt
  value_gt: BigInt
  value_lt: BigInt
  value_gte: BigInt
  value_lte: BigInt
  value_in: [BigInt!]
  value_not_in: [BigInt!]
}
type IncreaseLockAmountTransaction implements Transaction {
  id: ID!
  block: Int!
  hash: Bytes!
  provider: Bytes!
  sender: Bytes!
  timestamp: BigInt!
  type: TransactionType!
  value: BigInt!
}
enum IncreaseLockAmountTransaction_orderBy {
  id
  block
  hash
  provider
  sender
  timestamp
  type
  value
}
input IncreaseLockAmountTransaction_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  block: Int
  block_not: Int
  block_gt: Int
  block_lt: Int
  block_gte: Int
  block_lte: Int
  block_in: [Int!]
  block_not_in: [Int!]
  hash: Bytes
  hash_not: Bytes
  hash_in: [Bytes!]
  hash_not_in: [Bytes!]
  hash_contains: Bytes
  hash_not_contains: Bytes
  provider: Bytes
  provider_not: Bytes
  provider_in: [Bytes!]
  provider_not_in: [Bytes!]
  provider_contains: Bytes
  provider_not_contains: Bytes
  sender: Bytes
  sender_not: Bytes
  sender_in: [Bytes!]
  sender_not_in: [Bytes!]
  sender_contains: Bytes
  sender_not_contains: Bytes
  timestamp: BigInt
  timestamp_not: BigInt
  timestamp_gt: BigInt
  timestamp_lt: BigInt
  timestamp_gte: BigInt
  timestamp_lte: BigInt
  timestamp_in: [BigInt!]
  timestamp_not_in: [BigInt!]
  type: TransactionType
  type_not: TransactionType
  value: BigInt
  value_not: BigInt
  value_gt: BigInt
  value_lt: BigInt
  value_gte: BigInt
  value_lte: BigInt
  value_in: [BigInt!]
  value_not_in: [BigInt!]
}
type IncreaseLockTimeTransaction implements Transaction {
  id: ID!
  block: Int!
  hash: Bytes!
  lockTime: BigInt!
  provider: Bytes!
  sender: Bytes!
  type: TransactionType!
  timestamp: BigInt!
}
enum IncreaseLockTimeTransaction_orderBy {
  id
  block
  hash
  lockTime
  provider
  sender
  type
  timestamp
}
input IncreaseLockTimeTransaction_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  block: Int
  block_not: Int
  block_gt: Int
  block_lt: Int
  block_gte: Int
  block_lte: Int
  block_in: [Int!]
  block_not_in: [Int!]
  hash: Bytes
  hash_not: Bytes
  hash_in: [Bytes!]
  hash_not_in: [Bytes!]
  hash_contains: Bytes
  hash_not_contains: Bytes
  lockTime: BigInt
  lockTime_not: BigInt
  lockTime_gt: BigInt
  lockTime_lt: BigInt
  lockTime_gte: BigInt
  lockTime_lte: BigInt
  lockTime_in: [BigInt!]
  lockTime_not_in: [BigInt!]
  provider: Bytes
  provider_not: Bytes
  provider_in: [Bytes!]
  provider_not_in: [Bytes!]
  provider_contains: Bytes
  provider_not_contains: Bytes
  sender: Bytes
  sender_not: Bytes
  sender_in: [Bytes!]
  sender_not_in: [Bytes!]
  sender_contains: Bytes
  sender_not_contains: Bytes
  type: TransactionType
  type_not: TransactionType
  timestamp: BigInt
  timestamp_not: BigInt
  timestamp_gt: BigInt
  timestamp_lt: BigInt
  timestamp_gte: BigInt
  timestamp_lte: BigInt
  timestamp_in: [BigInt!]
  timestamp_not_in: [BigInt!]
}
enum Transaction_orderBy {
  id
  block
  hash
  sender
  timestamp
  type
}
input Transaction_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  block: Int
  block_not: Int
  block_gt: Int
  block_lt: Int
  block_gte: Int
  block_lte: Int
  block_in: [Int!]
  block_not_in: [Int!]
  hash: Bytes
  hash_not: Bytes
  hash_in: [Bytes!]
  hash_not_in: [Bytes!]
  hash_contains: Bytes
  hash_not_contains: Bytes
  sender: Bytes
  sender_not: Bytes
  sender_in: [Bytes!]
  sender_not_in: [Bytes!]
  sender_contains: Bytes
  sender_not_contains: Bytes
  timestamp: BigInt
  timestamp_not: BigInt
  timestamp_gt: BigInt
  timestamp_lt: BigInt
  timestamp_gte: BigInt
  timestamp_lte: BigInt
  timestamp_in: [BigInt!]
  timestamp_not_in: [BigInt!]
  type: TransactionType
  type_not: TransactionType
}
type Subscription {
  userLockup(
    id: ID!
    """
    The block at which the query should be executed. Can either be an `{ number:
    Int }` containing the block number or a `{ hash: Bytes }` value containing a
    block hash. Defaults to the latest block when omitted.
    """
    block: Block_height
  ): UserLockup
  userLockups(
    skip: Int = 0
    first: Int = 100
    orderBy: UserLockup_orderBy
    orderDirection: OrderDirection
    where: UserLockup_filter
    """
    The block at which the query should be executed. Can either be an `{ number:
    Int }` containing the block number or a `{ hash: Bytes }` value containing a
    block hash. Defaults to the latest block when omitted.
    """
    block: Block_height
  ): [UserLockup!]!
  token(
    id: ID!
    """
    The block at which the query should be executed. Can either be an `{ number:
    Int }` containing the block number or a `{ hash: Bytes }` value containing a
    block hash. Defaults to the latest block when omitted.
    """
    block: Block_height
  ): Token
  tokens(
    skip: Int = 0
    first: Int = 100
    orderBy: Token_orderBy
    orderDirection: OrderDirection
    where: Token_filter
    """
    The block at which the query should be executed. Can either be an `{ number:
    Int }` containing the block number or a `{ hash: Bytes }` value containing a
    block hash. Defaults to the latest block when omitted.
    """
    block: Block_height
  ): [Token!]!
  incentivisedVotingLockup(
    id: ID!
    """
    The block at which the query should be executed. Can either be an `{ number:
    Int }` containing the block number or a `{ hash: Bytes }` value containing a
    block hash. Defaults to the latest block when omitted.
    """
    block: Block_height
  ): IncentivisedVotingLockup
  incentivisedVotingLockups(
    skip: Int = 0
    first: Int = 100
    orderBy: IncentivisedVotingLockup_orderBy
    orderDirection: OrderDirection
    where: IncentivisedVotingLockup_filter
    """
    The block at which the query should be executed. Can either be an `{ number:
    Int }` containing the block number or a `{ hash: Bytes }` value containing a
    block hash. Defaults to the latest block when omitted.
    """
    block: Block_height
  ): [IncentivisedVotingLockup!]!
  rewardsDistributor(
    id: ID!
    """
    The block at which the query should be executed. Can either be an `{ number:
    Int }` containing the block number or a `{ hash: Bytes }` value containing a
    block hash. Defaults to the latest block when omitted.
    """
    block: Block_height
  ): RewardsDistributor
  rewardsDistributors(
    skip: Int = 0
    first: Int = 100
    orderBy: RewardsDistributor_orderBy
    orderDirection: OrderDirection
    where: RewardsDistributor_filter
    """
    The block at which the query should be executed. Can either be an `{ number:
    Int }` containing the block number or a `{ hash: Bytes }` value containing a
    block hash. Defaults to the latest block when omitted.
    """
    block: Block_height
  ): [RewardsDistributor!]!
  stakingReward(
    id: ID!
    """
    The block at which the query should be executed. Can either be an `{ number:
    Int }` containing the block number or a `{ hash: Bytes }` value containing a
    block hash. Defaults to the latest block when omitted.
    """
    block: Block_height
  ): StakingReward
  stakingRewards(
    skip: Int = 0
    first: Int = 100
    orderBy: StakingReward_orderBy
    orderDirection: OrderDirection
    where: StakingReward_filter
    """
    The block at which the query should be executed. Can either be an `{ number:
    Int }` containing the block number or a `{ hash: Bytes }` value containing a
    block hash. Defaults to the latest block when omitted.
    """
    block: Block_height
  ): [StakingReward!]!
  stakingBalance(
    id: ID!
    """
    The block at which the query should be executed. Can either be an `{ number:
    Int }` containing the block number or a `{ hash: Bytes }` value containing a
    block hash. Defaults to the latest block when omitted.
    """
    block: Block_height
  ): StakingBalance
  stakingBalances(
    skip: Int = 0
    first: Int = 100
    orderBy: StakingBalance_orderBy
    orderDirection: OrderDirection
    where: StakingBalance_filter
    """
    The block at which the query should be executed. Can either be an `{ number:
    Int }` containing the block number or a `{ hash: Bytes }` value containing a
    block hash. Defaults to the latest block when omitted.
    """
    block: Block_height
  ): [StakingBalance!]!
  withdrawTransaction(
    id: ID!
    """
    The block at which the query should be executed. Can either be an `{ number:
    Int }` containing the block number or a `{ hash: Bytes }` value containing a
    block hash. Defaults to the latest block when omitted.
    """
    block: Block_height
  ): WithdrawTransaction
  withdrawTransactions(
    skip: Int = 0
    first: Int = 100
    orderBy: WithdrawTransaction_orderBy
    orderDirection: OrderDirection
    where: WithdrawTransaction_filter
    """
    The block at which the query should be executed. Can either be an `{ number:
    Int }` containing the block number or a `{ hash: Bytes }` value containing a
    block hash. Defaults to the latest block when omitted.
    """
    block: Block_height
  ): [WithdrawTransaction!]!
  ejectTransaction(
    id: ID!
    """
    The block at which the query should be executed. Can either be an `{ number:
    Int }` containing the block number or a `{ hash: Bytes }` value containing a
    block hash. Defaults to the latest block when omitted.
    """
    block: Block_height
  ): EjectTransaction
  ejectTransactions(
    skip: Int = 0
    first: Int = 100
    orderBy: EjectTransaction_orderBy
    orderDirection: OrderDirection
    where: EjectTransaction_filter
    """
    The block at which the query should be executed. Can either be an `{ number:
    Int }` containing the block number or a `{ hash: Bytes }` value containing a
    block hash. Defaults to the latest block when omitted.
    """
    block: Block_height
  ): [EjectTransaction!]!
  claimTransaction(
    id: ID!
    """
    The block at which the query should be executed. Can either be an `{ number:
    Int }` containing the block number or a `{ hash: Bytes }` value containing a
    block hash. Defaults to the latest block when omitted.
    """
    block: Block_height
  ): ClaimTransaction
  claimTransactions(
    skip: Int = 0
    first: Int = 100
    orderBy: ClaimTransaction_orderBy
    orderDirection: OrderDirection
    where: ClaimTransaction_filter
    """
    The block at which the query should be executed. Can either be an `{ number:
    Int }` containing the block number or a `{ hash: Bytes }` value containing a
    block hash. Defaults to the latest block when omitted.
    """
    block: Block_height
  ): [ClaimTransaction!]!
  createLockTransaction(
    id: ID!
    """
    The block at which the query should be executed. Can either be an `{ number:
    Int }` containing the block number or a `{ hash: Bytes }` value containing a
    block hash. Defaults to the latest block when omitted.
    """
    block: Block_height
  ): CreateLockTransaction
  createLockTransactions(
    skip: Int = 0
    first: Int = 100
    orderBy: CreateLockTransaction_orderBy
    orderDirection: OrderDirection
    where: CreateLockTransaction_filter
    """
    The block at which the query should be executed. Can either be an `{ number:
    Int }` containing the block number or a `{ hash: Bytes }` value containing a
    block hash. Defaults to the latest block when omitted.
    """
    block: Block_height
  ): [CreateLockTransaction!]!
  increaseLockAmountTransaction(
    id: ID!
    """
    The block at which the query should be executed. Can either be an `{ number:
    Int }` containing the block number or a `{ hash: Bytes }` value containing a
    block hash. Defaults to the latest block when omitted.
    """
    block: Block_height
  ): IncreaseLockAmountTransaction
  increaseLockAmountTransactions(
    skip: Int = 0
    first: Int = 100
    orderBy: IncreaseLockAmountTransaction_orderBy
    orderDirection: OrderDirection
    where: IncreaseLockAmountTransaction_filter
    """
    The block at which the query should be executed. Can either be an `{ number:
    Int }` containing the block number or a `{ hash: Bytes }` value containing a
    block hash. Defaults to the latest block when omitted.
    """
    block: Block_height
  ): [IncreaseLockAmountTransaction!]!
  increaseLockTimeTransaction(
    id: ID!
    """
    The block at which the query should be executed. Can either be an `{ number:
    Int }` containing the block number or a `{ hash: Bytes }` value containing a
    block hash. Defaults to the latest block when omitted.
    """
    block: Block_height
  ): IncreaseLockTimeTransaction
  increaseLockTimeTransactions(
    skip: Int = 0
    first: Int = 100
    orderBy: IncreaseLockTimeTransaction_orderBy
    orderDirection: OrderDirection
    where: IncreaseLockTimeTransaction_filter
    """
    The block at which the query should be executed. Can either be an `{ number:
    Int }` containing the block number or a `{ hash: Bytes }` value containing a
    block hash. Defaults to the latest block when omitted.
    """
    block: Block_height
  ): [IncreaseLockTimeTransaction!]!
  transaction(
    id: ID!
    """
    The block at which the query should be executed. Can either be an `{ number:
    Int }` containing the block number or a `{ hash: Bytes }` value containing a
    block hash. Defaults to the latest block when omitted.
    """
    block: Block_height
  ): Transaction
  transactions(
    skip: Int = 0
    first: Int = 100
    orderBy: Transaction_orderBy
    orderDirection: OrderDirection
    where: Transaction_filter
    """
    The block at which the query should be executed. Can either be an `{ number:
    Int }` containing the block number or a `{ hash: Bytes }` value containing a
    block hash. Defaults to the latest block when omitted.
    """
    block: Block_height
  ): [Transaction!]!
}
scalar BigDecimal
enum LockAction {
  CREATE_LOCK
  INCREASE_LOCK_AMOUNT
  INCREASE_LOCK_TIME
}