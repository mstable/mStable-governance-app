# import './fragments.graphql'

query Erc20Tokens($addresses: [Bytes!]!) {
  tokens(where: { address_in: $addresses }) {
    ...TokenDetails
  }
}

query AllErc20Tokens {
  tokens {
    ...TokenDetails
  }
}

query Token($id: ID!) {
  token(id: $id) {
    ...TokenDetails
  }
}

query IncentivisedVotingLockups(
  $hasAccount: Boolean!
  $hasBlock: Boolean!
  $account: Bytes
  $block: Block_height
) {
  current: incentivisedVotingLockups @skip(if: $hasBlock) {
    ...IncentivisedVotingLockupDetails
    stakingRewards(where: { account: $account }, first: 1)
      @include(if: $hasAccount) {
      amount
      amountPerTokenPaid
      rewardsPaid
    }
    stakingBalances(where: { account: $account }, first: 1)
      @include(if: $hasAccount) {
      amount
    }
    userLockups(where: { account: $account }, first: 1)
      @include(if: $hasAccount) {
      ...UserLockupDetails
      ejected
      ejectedHash
    }
  }
  historic: incentivisedVotingLockups(block: $block) @include(if: $hasBlock) {
    ...IncentivisedVotingLockupDetails
  }
}

query AllUserLockups(
  $minLockTime: BigInt!
  $hasBlock: Boolean!
  $block: Block_height
) {
  current: userLockups(
    where: { lockTime_gte: $minLockTime }
    first: 1000
    orderBy: bias
    orderDirection: desc
  ) @skip(if: $hasBlock) {
    ...UserLockupDetails
  }
  historic: userLockups(
    where: { lockTime_gte: $minLockTime }
    block: $block
    first: 1000
    orderBy: bias
    orderDirection: desc
  ) @include(if: $hasBlock) {
    ...UserLockupDetails
  }
}

query HistoricTransactions($account: Bytes) @api(name: mstable) {
  createLockTransactions(where: { provider: $account }, orderBy: timestamp) {
    ...TransactionDetails
    value
    lockTime
  }
  increaseLockTimeTransactions(
    where: { provider: $account }
    orderBy: timestamp
  ) {
    ...TransactionDetails
    lockTime
  }
  increaseLockAmountTransactions(
    where: { provider: $account }
    orderBy: timestamp
  ) {
    ...TransactionDetails
    value
  }
  withdrawTransactions(where: { provider: $account }, orderBy: timestamp) {
    ...TransactionDetails
    value
  }
  claimTransactions(where: { user: $account }, orderBy: timestamp) {
    ...TransactionDetails
    reward
  }
}
