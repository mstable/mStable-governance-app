# import './fragments.graphql'

query Erc20Tokens($addresses: [Bytes!]!) @api(name: mstable) {
  tokens(where: { address_in: $addresses }) {
    ...TokenDetails
  }
}

query AllErc20Tokens @api(name: mstable) {
  tokens {
    ...TokenDetails
  }
}

query Token($id: ID!) @api(name: mstable) {
  token(id: $id) {
    ...TokenDetails
  }
}

query UserLockups($account: Bytes, $hasAccount: Boolean!) @api(name: mstable) {
  incentivisedVotingLockups {
    address: id
    periodFinish
    lastUpdateTime
    rewardPerTokenStored
    end
    duration
    rewardRate
    globalEpoch
    expired
    maxTime
    totalStaticWeight
    totalStakingRewards
    totalValue
    stakingToken {
      ...TokenDetails
    }
    rewardsToken {
      ...TokenDetails
    }
    rewardsDistributor {
      id
      fundManagers
    }
    stakingRewards(where: { account: $account }, first: 1)
      @include(if: $hasAccount) {
      amount
      amountPerTokenPaid
      rewardsPaid
    }
    stakingBalances(where: { account: $account }, first: 1)
      @include(if: $hasAccount) {
      amount
    }
    userLockups(where: { account: $account }, first: 1)
      @include(if: $hasAccount) {
      value
      lockTime
      ts
      slope
      bias
      ejected
      ejectedHash
    }
  }
}

query AllUserLockups($minLockTime: BigInt!) @api(name: mstable) {
  userLockups(
    where: { lockTime_gte: $minLockTime }
    first: 1000
    orderBy: bias
    orderDirection: desc
  ) {
    value
    account
    lockTime
    bias
    slope
    ts
  }
}

query HistoricTransactions($account: Bytes) @api(name: mstable) {
  createLockTransactions(where: { provider: $account }, orderBy: timestamp) {
    ...TransactionDetails
    value
    lockTime
  }
  increaseLockTimeTransactions(
    where: { provider: $account }
    orderBy: timestamp
  ) {
    ...TransactionDetails
    lockTime
  }
  increaseLockAmountTransactions(
    where: { provider: $account }
    orderBy: timestamp
  ) {
    ...TransactionDetails
    value
  }
  withdrawTransactions(where: { provider: $account }, orderBy: timestamp) {
    ...TransactionDetails
    value
  }
  claimTransactions(where: { user: $account }, orderBy: timestamp) {
    ...TransactionDetails
    reward
  }
}
